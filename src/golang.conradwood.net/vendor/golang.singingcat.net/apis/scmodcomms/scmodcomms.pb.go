// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/scmodcomms/scmodcomms.proto
// DO NOT EDIT!

/*
Package scmodcomms is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/scmodcomms/scmodcomms.proto

It has these top-level messages:
	Response
	ProcessRequest
	ProcessResponse
	ModuleStats
	Flow
	ModuleStatus
	FlowID
	Call
	CallResponse
	ComResponse
*/
package scmodcomms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import singingcat "golang.singingcat.net/apis/singingcat"
import scweb "golang.singingcat.net/apis/scweb"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Response struct {
	Command *singingcat.Command `protobuf:"bytes,1,opt,name=Command" json:"Command,omitempty"`
	Sender  *scweb.Module       `protobuf:"bytes,2,opt,name=Sender" json:"Sender,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Response) GetCommand() *singingcat.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Response) GetSender() *scweb.Module {
	if m != nil {
		return m.Sender
	}
	return nil
}

type ProcessRequest struct {
	Command *singingcat.Command `protobuf:"bytes,1,opt,name=Command" json:"Command,omitempty"`
}

func (m *ProcessRequest) Reset()                    { *m = ProcessRequest{} }
func (m *ProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessRequest) ProtoMessage()               {}
func (*ProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProcessRequest) GetCommand() *singingcat.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

type ProcessResponse struct {
	StopProcessing bool `protobuf:"varint,1,opt,name=StopProcessing" json:"StopProcessing,omitempty"`
}

func (m *ProcessResponse) Reset()                    { *m = ProcessResponse{} }
func (m *ProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessResponse) ProtoMessage()               {}
func (*ProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProcessResponse) GetStopProcessing() bool {
	if m != nil {
		return m.StopProcessing
	}
	return false
}

// in database
type ModuleStats struct {
	ID              uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	LastComReceived uint32 `protobuf:"varint,2,opt,name=LastComReceived" json:"LastComReceived,omitempty"`
}

func (m *ModuleStats) Reset()                    { *m = ModuleStats{} }
func (m *ModuleStats) String() string            { return proto.CompactTextString(m) }
func (*ModuleStats) ProtoMessage()               {}
func (*ModuleStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ModuleStats) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ModuleStats) GetLastComReceived() uint32 {
	if m != nil {
		return m.LastComReceived
	}
	return 0
}

type Flow struct {
	Module                  *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=Module" json:"Module,omitempty"`
	InternalID              uint32                `protobuf:"varint,2,opt,name=InternalID" json:"InternalID,omitempty"`
	Created                 uint32                `protobuf:"varint,3,opt,name=Created" json:"Created,omitempty"`
	TimeSincePos            uint32                `protobuf:"varint,4,opt,name=TimeSincePos" json:"TimeSincePos,omitempty"`
	IsStarted               bool                  `protobuf:"varint,5,opt,name=IsStarted" json:"IsStarted,omitempty"`
	Name                    string                `protobuf:"bytes,6,opt,name=Name" json:"Name,omitempty"`
	CurrentPosition         uint32                `protobuf:"varint,7,opt,name=CurrentPosition" json:"CurrentPosition,omitempty"`
	CurrentPositionFailures uint32                `protobuf:"varint,8,opt,name=CurrentPositionFailures" json:"CurrentPositionFailures,omitempty"`
	Next                    *Flow                 `protobuf:"bytes,9,opt,name=Next" json:"Next,omitempty"`
}

func (m *Flow) Reset()                    { *m = Flow{} }
func (m *Flow) String() string            { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()               {}
func (*Flow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Flow) GetModule() *singingcat.ModuleRef {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *Flow) GetInternalID() uint32 {
	if m != nil {
		return m.InternalID
	}
	return 0
}

func (m *Flow) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Flow) GetTimeSincePos() uint32 {
	if m != nil {
		return m.TimeSincePos
	}
	return 0
}

func (m *Flow) GetIsStarted() bool {
	if m != nil {
		return m.IsStarted
	}
	return false
}

func (m *Flow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flow) GetCurrentPosition() uint32 {
	if m != nil {
		return m.CurrentPosition
	}
	return 0
}

func (m *Flow) GetCurrentPositionFailures() uint32 {
	if m != nil {
		return m.CurrentPositionFailures
	}
	return 0
}

func (m *Flow) GetNext() *Flow {
	if m != nil {
		return m.Next
	}
	return nil
}

type ModuleStatus struct {
	Flows []*Flow `protobuf:"bytes,1,rep,name=Flows" json:"Flows,omitempty"`
}

func (m *ModuleStatus) Reset()                    { *m = ModuleStatus{} }
func (m *ModuleStatus) String() string            { return proto.CompactTextString(m) }
func (*ModuleStatus) ProtoMessage()               {}
func (*ModuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ModuleStatus) GetFlows() []*Flow {
	if m != nil {
		return m.Flows
	}
	return nil
}

type FlowID struct {
	InternalID uint32 `protobuf:"varint,1,opt,name=InternalID" json:"InternalID,omitempty"`
}

func (m *FlowID) Reset()                    { *m = FlowID{} }
func (m *FlowID) String() string            { return proto.CompactTextString(m) }
func (*FlowID) ProtoMessage()               {}
func (*FlowID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FlowID) GetInternalID() uint32 {
	if m != nil {
		return m.InternalID
	}
	return 0
}

type Call struct {
	Module       *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=Module" json:"Module,omitempty"`
	Type         singingcat.ComType    `protobuf:"varint,2,opt,name=Type,enum=singingcat.ComType" json:"Type,omitempty"`
	Args         [][]byte              `protobuf:"bytes,3,rep,name=Args,proto3" json:"Args,omitempty"`
	RetrySeconds uint32                `protobuf:"varint,4,opt,name=RetrySeconds" json:"RetrySeconds,omitempty"`
}

func (m *Call) Reset()                    { *m = Call{} }
func (m *Call) String() string            { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()               {}
func (*Call) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Call) GetModule() *singingcat.ModuleRef {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *Call) GetType() singingcat.ComType {
	if m != nil {
		return m.Type
	}
	return singingcat.ComType_UNDEFINED
}

func (m *Call) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Call) GetRetrySeconds() uint32 {
	if m != nil {
		return m.RetrySeconds
	}
	return 0
}

type CallResponse struct {
	Call         *Call                 `protobuf:"bytes,1,opt,name=Call" json:"Call,omitempty"`
	Success      bool                  `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	ErrorMessage string                `protobuf:"bytes,3,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	Seq          uint32                `protobuf:"varint,4,opt,name=Seq" json:"Seq,omitempty"`
	Responses    []*singingcat.Command `protobuf:"bytes,5,rep,name=Responses" json:"Responses,omitempty"`
}

func (m *CallResponse) Reset()                    { *m = CallResponse{} }
func (m *CallResponse) String() string            { return proto.CompactTextString(m) }
func (*CallResponse) ProtoMessage()               {}
func (*CallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CallResponse) GetCall() *Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *CallResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CallResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CallResponse) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CallResponse) GetResponses() []*singingcat.Command {
	if m != nil {
		return m.Responses
	}
	return nil
}

// a protobut, usually sent back to scmodcomms after processing a command
type ComResponse struct {
	SendReply bool `protobuf:"varint,1,opt,name=SendReply" json:"SendReply,omitempty"`
}

func (m *ComResponse) Reset()                    { *m = ComResponse{} }
func (m *ComResponse) String() string            { return proto.CompactTextString(m) }
func (*ComResponse) ProtoMessage()               {}
func (*ComResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ComResponse) GetSendReply() bool {
	if m != nil {
		return m.SendReply
	}
	return false
}

func init() {
	proto.RegisterType((*Response)(nil), "scmodcomms.Response")
	proto.RegisterType((*ProcessRequest)(nil), "scmodcomms.ProcessRequest")
	proto.RegisterType((*ProcessResponse)(nil), "scmodcomms.ProcessResponse")
	proto.RegisterType((*ModuleStats)(nil), "scmodcomms.ModuleStats")
	proto.RegisterType((*Flow)(nil), "scmodcomms.Flow")
	proto.RegisterType((*ModuleStatus)(nil), "scmodcomms.ModuleStatus")
	proto.RegisterType((*FlowID)(nil), "scmodcomms.FlowID")
	proto.RegisterType((*Call)(nil), "scmodcomms.Call")
	proto.RegisterType((*CallResponse)(nil), "scmodcomms.CallResponse")
	proto.RegisterType((*ComResponse)(nil), "scmodcomms.ComResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCModCommsService service

type SCModCommsServiceClient interface {
	// cancel flows for a module
	CancelFlow(ctx context.Context, in *FlowID, opts ...grpc.CallOption) (*common.Void, error)
	// get me the current status of a module, e.g. which flows are active)
	GetModuleStatus(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ModuleStatus, error)
	// intented to be called by the scserver whenever it receives a new command
	ProcessCommand(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	// enquire status of a module (async, this triggers a request to the module)
	Enquire(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
	// send a command to a module (convenience method around scserver to use moduleid instead of nodeid etc..)
	SendAsync(ctx context.Context, in *Call, opts ...grpc.CallOption) (*CallResponse, error)
	// send a command to a module (convenience method around scserver to use moduleid instead of nodeid etc..)
	SendSync(ctx context.Context, in *Call, opts ...grpc.CallOption) (*CallResponse, error)
	// get module stats for a given module
	GetModuleStats(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ModuleStats, error)
}

type sCModCommsServiceClient struct {
	cc *grpc.ClientConn
}

func NewSCModCommsServiceClient(cc *grpc.ClientConn) SCModCommsServiceClient {
	return &sCModCommsServiceClient{cc}
}

func (c *sCModCommsServiceClient) CancelFlow(ctx context.Context, in *FlowID, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scmodcomms.SCModCommsService/CancelFlow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCModCommsServiceClient) GetModuleStatus(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ModuleStatus, error) {
	out := new(ModuleStatus)
	err := grpc.Invoke(ctx, "/scmodcomms.SCModCommsService/GetModuleStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCModCommsServiceClient) ProcessCommand(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := grpc.Invoke(ctx, "/scmodcomms.SCModCommsService/ProcessCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCModCommsServiceClient) Enquire(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scmodcomms.SCModCommsService/Enquire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCModCommsServiceClient) SendAsync(ctx context.Context, in *Call, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := grpc.Invoke(ctx, "/scmodcomms.SCModCommsService/SendAsync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCModCommsServiceClient) SendSync(ctx context.Context, in *Call, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := grpc.Invoke(ctx, "/scmodcomms.SCModCommsService/SendSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCModCommsServiceClient) GetModuleStats(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ModuleStats, error) {
	out := new(ModuleStats)
	err := grpc.Invoke(ctx, "/scmodcomms.SCModCommsService/GetModuleStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCModCommsService service

type SCModCommsServiceServer interface {
	// cancel flows for a module
	CancelFlow(context.Context, *FlowID) (*common.Void, error)
	// get me the current status of a module, e.g. which flows are active)
	GetModuleStatus(context.Context, *singingcat.ModuleRef) (*ModuleStatus, error)
	// intented to be called by the scserver whenever it receives a new command
	ProcessCommand(context.Context, *ProcessRequest) (*ProcessResponse, error)
	// enquire status of a module (async, this triggers a request to the module)
	Enquire(context.Context, *singingcat.ModuleRef) (*common.Void, error)
	// send a command to a module (convenience method around scserver to use moduleid instead of nodeid etc..)
	SendAsync(context.Context, *Call) (*CallResponse, error)
	// send a command to a module (convenience method around scserver to use moduleid instead of nodeid etc..)
	SendSync(context.Context, *Call) (*CallResponse, error)
	// get module stats for a given module
	GetModuleStats(context.Context, *singingcat.ModuleRef) (*ModuleStats, error)
}

func RegisterSCModCommsServiceServer(s *grpc.Server, srv SCModCommsServiceServer) {
	s.RegisterService(&_SCModCommsService_serviceDesc, srv)
}

func _SCModCommsService_CancelFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCModCommsServiceServer).CancelFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scmodcomms.SCModCommsService/CancelFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCModCommsServiceServer).CancelFlow(ctx, req.(*FlowID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCModCommsService_GetModuleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCModCommsServiceServer).GetModuleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scmodcomms.SCModCommsService/GetModuleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCModCommsServiceServer).GetModuleStatus(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCModCommsService_ProcessCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCModCommsServiceServer).ProcessCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scmodcomms.SCModCommsService/ProcessCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCModCommsServiceServer).ProcessCommand(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCModCommsService_Enquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCModCommsServiceServer).Enquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scmodcomms.SCModCommsService/Enquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCModCommsServiceServer).Enquire(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCModCommsService_SendAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Call)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCModCommsServiceServer).SendAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scmodcomms.SCModCommsService/SendAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCModCommsServiceServer).SendAsync(ctx, req.(*Call))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCModCommsService_SendSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Call)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCModCommsServiceServer).SendSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scmodcomms.SCModCommsService/SendSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCModCommsServiceServer).SendSync(ctx, req.(*Call))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCModCommsService_GetModuleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCModCommsServiceServer).GetModuleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scmodcomms.SCModCommsService/GetModuleStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCModCommsServiceServer).GetModuleStats(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCModCommsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scmodcomms.SCModCommsService",
	HandlerType: (*SCModCommsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelFlow",
			Handler:    _SCModCommsService_CancelFlow_Handler,
		},
		{
			MethodName: "GetModuleStatus",
			Handler:    _SCModCommsService_GetModuleStatus_Handler,
		},
		{
			MethodName: "ProcessCommand",
			Handler:    _SCModCommsService_ProcessCommand_Handler,
		},
		{
			MethodName: "Enquire",
			Handler:    _SCModCommsService_Enquire_Handler,
		},
		{
			MethodName: "SendAsync",
			Handler:    _SCModCommsService_SendAsync_Handler,
		},
		{
			MethodName: "SendSync",
			Handler:    _SCModCommsService_SendSync_Handler,
		},
		{
			MethodName: "GetModuleStats",
			Handler:    _SCModCommsService_GetModuleStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/scmodcomms/scmodcomms.proto",
}

func init() {
	proto.RegisterFile("golang.singingcat.net/apis/scmodcomms/scmodcomms.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0x6d, 0x4f, 0xe3, 0x46,
	0x10, 0x56, 0x5e, 0xc8, 0xcb, 0x10, 0x02, 0xdd, 0xaa, 0xc2, 0x4a, 0x51, 0x15, 0x59, 0xbc, 0x44,
	0x6a, 0x31, 0x2a, 0x95, 0x68, 0xfb, 0xa9, 0x85, 0x04, 0x90, 0xa5, 0x82, 0xd0, 0x1a, 0xf5, 0xf3,
	0x19, 0x7b, 0x2e, 0xb2, 0x64, 0xef, 0x86, 0xdd, 0x0d, 0x5c, 0xfe, 0xc8, 0xfd, 0x93, 0xd3, 0xfd,
	0x8c, 0xfb, 0x4b, 0xa7, 0x5d, 0x6f, 0x12, 0x3b, 0x04, 0x24, 0xbe, 0x24, 0xeb, 0x67, 0x9e, 0x99,
	0x7d, 0x66, 0x66, 0x67, 0x17, 0xce, 0xc6, 0x3c, 0x0d, 0xd9, 0xd8, 0x93, 0x09, 0x1b, 0x27, 0x6c,
	0x1c, 0x85, 0xca, 0x63, 0xa8, 0x4e, 0xc2, 0x49, 0x22, 0x4f, 0x64, 0x94, 0xf1, 0x38, 0xe2, 0x59,
	0x56, 0x5c, 0x7a, 0x13, 0xc1, 0x15, 0x27, 0xb0, 0x44, 0x7a, 0x6f, 0xc6, 0x58, 0x60, 0x85, 0x65,
	0x1e, 0xa3, 0xf7, 0xdb, 0x9b, 0x7b, 0x3f, 0xe3, 0x43, 0xfe, 0x6b, 0xd9, 0x9e, 0x65, 0x47, 0x9c,
	0x89, 0x30, 0x7e, 0xe6, 0x3c, 0x5e, 0xb2, 0xb5, 0x0e, 0xce, 0xec, 0x5f, 0xce, 0x77, 0x3f, 0x40,
	0x8b, 0xa2, 0x9c, 0x70, 0x26, 0x91, 0x1c, 0x43, 0x73, 0xc8, 0xb3, 0x2c, 0x64, 0xb1, 0x53, 0xe9,
	0x57, 0x06, 0x9b, 0xa7, 0x3f, 0x16, 0x37, 0xb5, 0x26, 0x3a, 0xe7, 0x90, 0x03, 0x68, 0x04, 0xc8,
	0x62, 0x14, 0x4e, 0xd5, 0xb0, 0xb7, 0xbc, 0x5c, 0xc8, 0x0d, 0x8f, 0xa7, 0x29, 0x52, 0x6b, 0x74,
	0xff, 0x81, 0xee, 0x9d, 0xe0, 0x11, 0x4a, 0x49, 0xf1, 0x71, 0x8a, 0x52, 0xbd, 0x73, 0x1f, 0xf7,
	0x6f, 0xd8, 0x5e, 0x04, 0xb0, 0x4a, 0x0f, 0xa1, 0x1b, 0x28, 0x3e, 0xb1, 0x70, 0xc2, 0xc6, 0x26,
	0x50, 0x8b, 0xae, 0xa0, 0xee, 0x35, 0x6c, 0xe6, 0x6a, 0x02, 0x15, 0x2a, 0x49, 0xba, 0x50, 0xf5,
	0x47, 0x86, 0x5a, 0xa7, 0x55, 0x7f, 0x44, 0x06, 0xb0, 0xfd, 0x5f, 0x28, 0xd5, 0x90, 0x67, 0x14,
	0x23, 0x4c, 0x9e, 0x30, 0x36, 0xa9, 0x6c, 0xd1, 0x55, 0xd8, 0xfd, 0x56, 0x85, 0xfa, 0x55, 0xca,
	0x9f, 0xc9, 0x31, 0x34, 0xf2, 0x88, 0x56, 0xfa, 0x4f, 0x45, 0xe9, 0x36, 0x73, 0xfc, 0x48, 0x2d,
	0x89, 0xfc, 0x02, 0xe0, 0x33, 0x85, 0x82, 0x85, 0xa9, 0x3f, 0xb2, 0xc1, 0x0b, 0x08, 0x71, 0xa0,
	0x39, 0x14, 0x18, 0x2a, 0x8c, 0x9d, 0x9a, 0x31, 0xce, 0x3f, 0x89, 0x0b, 0x9d, 0xfb, 0x24, 0xc3,
	0x20, 0x61, 0x11, 0xde, 0x71, 0xe9, 0xd4, 0x8d, 0xb9, 0x84, 0x91, 0x3d, 0x68, 0xfb, 0x32, 0x50,
	0xa1, 0xd0, 0xfe, 0x1b, 0xa6, 0x02, 0x4b, 0x80, 0x10, 0xa8, 0xdf, 0x86, 0x19, 0x3a, 0x8d, 0x7e,
	0x65, 0xd0, 0xa6, 0x66, 0xad, 0x33, 0x1e, 0x4e, 0x85, 0x40, 0xa6, 0xee, 0xb8, 0x4c, 0x54, 0xc2,
	0x99, 0xd3, 0xcc, 0x33, 0x5e, 0x81, 0xc9, 0x5f, 0xb0, 0xbb, 0x02, 0x5d, 0x85, 0x49, 0x3a, 0x15,
	0x28, 0x9d, 0x96, 0xf1, 0x78, 0xcd, 0x4c, 0xf6, 0xa1, 0x7e, 0x8b, 0x9f, 0x94, 0xd3, 0x36, 0x05,
	0xda, 0xf1, 0x0a, 0x53, 0xa1, 0x4b, 0x48, 0x8d, 0xd5, 0x3d, 0x83, 0xce, 0xb2, 0x35, 0x53, 0x49,
	0x0e, 0x61, 0x43, 0x5b, 0xa5, 0x53, 0xe9, 0xd7, 0xd6, 0xba, 0xe5, 0x66, 0x77, 0x00, 0x0d, 0xbd,
	0xf0, 0x47, 0x2b, 0xb5, 0xad, 0xac, 0xd6, 0xd6, 0xfd, 0x5c, 0x81, 0xfa, 0x30, 0x4c, 0xd3, 0xf7,
	0xf6, 0xec, 0x08, 0xea, 0xf7, 0xb3, 0x09, 0x9a, 0x6e, 0x75, 0x5f, 0x9c, 0x4d, 0x6d, 0xa2, 0x86,
	0xa0, 0x0b, 0x7c, 0x2e, 0xc6, 0xd2, 0xa9, 0xf5, 0x6b, 0x83, 0x0e, 0x35, 0x6b, 0xdd, 0x36, 0x8a,
	0x4a, 0xcc, 0x02, 0x8c, 0x38, 0x8b, 0x17, 0x6d, 0x2b, 0x62, 0xee, 0xd7, 0x0a, 0x74, 0xb4, 0xb0,
	0xc5, 0x71, 0xde, 0xcf, 0x85, 0x5a, 0x79, 0xa5, 0xd4, 0x0d, 0x2f, 0x4f, 0xc3, 0x81, 0x66, 0x30,
	0x8d, 0xf4, 0xd1, 0x36, 0xd2, 0x5a, 0x74, 0xfe, 0xa9, 0x37, 0xbd, 0x14, 0x82, 0x8b, 0x1b, 0x94,
	0x32, 0x1c, 0xa3, 0x39, 0x4a, 0x6d, 0x5a, 0xc2, 0xc8, 0x0e, 0xd4, 0x02, 0x7c, 0xb4, 0x7a, 0xf4,
	0x92, 0xfc, 0x0e, 0xed, 0xb9, 0x02, 0xe9, 0x6c, 0x98, 0xaa, 0xaf, 0x1d, 0xc4, 0x25, 0xcb, 0xfd,
	0x15, 0x36, 0xcd, 0x54, 0x58, 0xdd, 0x7b, 0xd0, 0xd6, 0x43, 0x4e, 0x71, 0x92, 0xce, 0xec, 0x04,
	0x2e, 0x81, 0xd3, 0x2f, 0x35, 0xf8, 0x21, 0x18, 0xde, 0xf0, 0x58, 0x07, 0x92, 0x01, 0x8a, 0xa7,
	0x24, 0x42, 0xe2, 0x01, 0x0c, 0x43, 0x16, 0x61, 0x6a, 0xc6, 0x89, 0xac, 0xb6, 0xd9, 0x1f, 0xf5,
	0x3a, 0x9e, 0xbd, 0xa1, 0xfe, 0xe7, 0x49, 0x4c, 0x2e, 0x60, 0xfb, 0x1a, 0x55, 0xe9, 0xa8, 0xac,
	0xef, 0x5f, 0xcf, 0x29, 0xc6, 0x2a, 0x39, 0xf8, 0x8b, 0x2b, 0x68, 0x7e, 0x77, 0xf5, 0x8a, 0xdc,
	0xf2, 0xf5, 0xd4, 0xfb, 0x79, 0xad, 0xcd, 0xa6, 0xec, 0x41, 0xf3, 0x92, 0x3d, 0x4e, 0x13, 0x81,
	0xaf, 0xc9, 0x28, 0xcb, 0xff, 0x33, 0x2f, 0xd1, 0xb9, 0x9c, 0xb1, 0x88, 0xbc, 0xe8, 0x6c, 0x59,
	0x73, 0xe9, 0x4c, 0x9c, 0x41, 0x4b, 0x3b, 0x06, 0xef, 0xf5, 0xfb, 0x17, 0xba, 0xa5, 0x7a, 0xbd,
	0x5a, 0xae, 0xdd, 0xf5, 0xe5, 0x92, 0x17, 0x47, 0x70, 0xc0, 0x50, 0x15, 0x9d, 0xec, 0x9b, 0xa2,
	0x1f, 0x91, 0x82, 0xd3, 0x43, 0xc3, 0x3c, 0x21, 0x7f, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x75,
	0xfb, 0x1f, 0x08, 0x1e, 0x07, 0x00, 0x00,
}
