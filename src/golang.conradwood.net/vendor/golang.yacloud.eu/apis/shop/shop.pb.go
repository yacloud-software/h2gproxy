// Code generated by protoc-gen-go.
// source: golang.yacloud.eu/apis/shop/shop.proto
// DO NOT EDIT!

/*
Package shop is a generated protocol buffer package.

It is generated from these files:
	golang.yacloud.eu/apis/shop/shop.proto

It has these top-level messages:
	PingResponse
	ShoppingBasket
	BasketItem
	LineItem
	LineItemID
	HTMLPage
	HTTPPageRequest
	PageRequest
*/
package shop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type ShoppingBasket struct {
	ID             uint64        `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Items          []*BasketItem `protobuf:"bytes,2,rep,name=Items" json:"Items,omitempty"`
	NetTotal       uint64        `protobuf:"varint,3,opt,name=NetTotal" json:"NetTotal,omitempty"`
	TotalVat       uint64        `protobuf:"varint,4,opt,name=TotalVat" json:"TotalVat,omitempty"`
	GrosTotal      uint64        `protobuf:"varint,5,opt,name=GrosTotal" json:"GrosTotal,omitempty"`
	Currency       string        `protobuf:"bytes,6,opt,name=Currency" json:"Currency,omitempty"`
	CurrencyPrefix string        `protobuf:"bytes,7,opt,name=CurrencyPrefix" json:"CurrencyPrefix,omitempty"`
	CurrencySuffix string        `protobuf:"bytes,8,opt,name=CurrencySuffix" json:"CurrencySuffix,omitempty"`
}

func (m *ShoppingBasket) Reset()                    { *m = ShoppingBasket{} }
func (m *ShoppingBasket) String() string            { return proto.CompactTextString(m) }
func (*ShoppingBasket) ProtoMessage()               {}
func (*ShoppingBasket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShoppingBasket) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ShoppingBasket) GetItems() []*BasketItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ShoppingBasket) GetNetTotal() uint64 {
	if m != nil {
		return m.NetTotal
	}
	return 0
}

func (m *ShoppingBasket) GetTotalVat() uint64 {
	if m != nil {
		return m.TotalVat
	}
	return 0
}

func (m *ShoppingBasket) GetGrosTotal() uint64 {
	if m != nil {
		return m.GrosTotal
	}
	return 0
}

func (m *ShoppingBasket) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *ShoppingBasket) GetCurrencyPrefix() string {
	if m != nil {
		return m.CurrencyPrefix
	}
	return ""
}

func (m *ShoppingBasket) GetCurrencySuffix() string {
	if m != nil {
		return m.CurrencySuffix
	}
	return ""
}

type BasketItem struct {
	Item     *LineItem       `protobuf:"bytes,1,opt,name=Item" json:"Item,omitempty"`
	Quantity uint32          `protobuf:"varint,2,opt,name=Quantity" json:"Quantity,omitempty"`
	Basket   *ShoppingBasket `protobuf:"bytes,3,opt,name=Basket" json:"Basket,omitempty"`
}

func (m *BasketItem) Reset()                    { *m = BasketItem{} }
func (m *BasketItem) String() string            { return proto.CompactTextString(m) }
func (*BasketItem) ProtoMessage()               {}
func (*BasketItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BasketItem) GetItem() *LineItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *BasketItem) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *BasketItem) GetBasket() *ShoppingBasket {
	if m != nil {
		return m.Basket
	}
	return nil
}

type LineItem struct {
	ID               uint64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	TechnicalName    string  `protobuf:"bytes,2,opt,name=TechnicalName" json:"TechnicalName,omitempty"`
	MarketingName    string  `protobuf:"bytes,3,opt,name=MarketingName" json:"MarketingName,omitempty"`
	ShortDescription string  `protobuf:"bytes,4,opt,name=ShortDescription" json:"ShortDescription,omitempty"`
	LongDescription  string  `protobuf:"bytes,5,opt,name=LongDescription" json:"LongDescription,omitempty"`
	NetAmount        uint64  `protobuf:"varint,6,opt,name=NetAmount" json:"NetAmount,omitempty"`
	Vat              uint64  `protobuf:"varint,7,opt,name=Vat" json:"Vat,omitempty"`
	GrosAmount       uint64  `protobuf:"varint,8,opt,name=GrosAmount" json:"GrosAmount,omitempty"`
	GrosAmountText   string  `protobuf:"bytes,9,opt,name=GrosAmountText" json:"GrosAmountText,omitempty"`
	VatRate          float64 `protobuf:"fixed64,10,opt,name=VatRate" json:"VatRate,omitempty"`
	StockLevel       uint64  `protobuf:"varint,11,opt,name=StockLevel" json:"StockLevel,omitempty"`
}

func (m *LineItem) Reset()                    { *m = LineItem{} }
func (m *LineItem) String() string            { return proto.CompactTextString(m) }
func (*LineItem) ProtoMessage()               {}
func (*LineItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LineItem) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LineItem) GetTechnicalName() string {
	if m != nil {
		return m.TechnicalName
	}
	return ""
}

func (m *LineItem) GetMarketingName() string {
	if m != nil {
		return m.MarketingName
	}
	return ""
}

func (m *LineItem) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *LineItem) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *LineItem) GetNetAmount() uint64 {
	if m != nil {
		return m.NetAmount
	}
	return 0
}

func (m *LineItem) GetVat() uint64 {
	if m != nil {
		return m.Vat
	}
	return 0
}

func (m *LineItem) GetGrosAmount() uint64 {
	if m != nil {
		return m.GrosAmount
	}
	return 0
}

func (m *LineItem) GetGrosAmountText() string {
	if m != nil {
		return m.GrosAmountText
	}
	return ""
}

func (m *LineItem) GetVatRate() float64 {
	if m != nil {
		return m.VatRate
	}
	return 0
}

func (m *LineItem) GetStockLevel() uint64 {
	if m != nil {
		return m.StockLevel
	}
	return 0
}

type LineItemID struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *LineItemID) Reset()                    { *m = LineItemID{} }
func (m *LineItemID) String() string            { return proto.CompactTextString(m) }
func (*LineItemID) ProtoMessage()               {}
func (*LineItemID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LineItemID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type HTMLPage struct {
	Path        string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Body        []byte `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	IsEmpty     bool   `protobuf:"varint,3,opt,name=IsEmpty" json:"IsEmpty,omitempty"`
	DoNotModify bool   `protobuf:"varint,4,opt,name=DoNotModify" json:"DoNotModify,omitempty"`
	MimeType    string `protobuf:"bytes,5,opt,name=MimeType" json:"MimeType,omitempty"`
}

func (m *HTMLPage) Reset()                    { *m = HTMLPage{} }
func (m *HTMLPage) String() string            { return proto.CompactTextString(m) }
func (*HTMLPage) ProtoMessage()               {}
func (*HTMLPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HTMLPage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTMLPage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *HTMLPage) GetIsEmpty() bool {
	if m != nil {
		return m.IsEmpty
	}
	return false
}

func (m *HTMLPage) GetDoNotModify() bool {
	if m != nil {
		return m.DoNotModify
	}
	return false
}

func (m *HTMLPage) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

type HTTPPageRequest struct {
	PageRequest  *PageRequest           `protobuf:"bytes,1,opt,name=PageRequest" json:"PageRequest,omitempty"`
	ServeRequest *h2gproxy.ServeRequest `protobuf:"bytes,2,opt,name=ServeRequest" json:"ServeRequest,omitempty"`
}

func (m *HTTPPageRequest) Reset()                    { *m = HTTPPageRequest{} }
func (m *HTTPPageRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPPageRequest) ProtoMessage()               {}
func (*HTTPPageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HTTPPageRequest) GetPageRequest() *PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

func (m *HTTPPageRequest) GetServeRequest() *h2gproxy.ServeRequest {
	if m != nil {
		return m.ServeRequest
	}
	return nil
}

type PageRequest struct {
	WikiPath   string `protobuf:"bytes,1,opt,name=WikiPath" json:"WikiPath,omitempty"`
	Partition  string `protobuf:"bytes,2,opt,name=Partition" json:"Partition,omitempty"`
	LinkPrefix string `protobuf:"bytes,3,opt,name=LinkPrefix" json:"LinkPrefix,omitempty"`
}

func (m *PageRequest) Reset()                    { *m = PageRequest{} }
func (m *PageRequest) String() string            { return proto.CompactTextString(m) }
func (*PageRequest) ProtoMessage()               {}
func (*PageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PageRequest) GetWikiPath() string {
	if m != nil {
		return m.WikiPath
	}
	return ""
}

func (m *PageRequest) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *PageRequest) GetLinkPrefix() string {
	if m != nil {
		return m.LinkPrefix
	}
	return ""
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "shop.PingResponse")
	proto.RegisterType((*ShoppingBasket)(nil), "shop.ShoppingBasket")
	proto.RegisterType((*BasketItem)(nil), "shop.BasketItem")
	proto.RegisterType((*LineItem)(nil), "shop.LineItem")
	proto.RegisterType((*LineItemID)(nil), "shop.LineItemID")
	proto.RegisterType((*HTMLPage)(nil), "shop.HTMLPage")
	proto.RegisterType((*HTTPPageRequest)(nil), "shop.HTTPPageRequest")
	proto.RegisterType((*PageRequest)(nil), "shop.PageRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Shop service

type ShopClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// add an item to the basket
	AddItemToBasket(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*ShoppingBasket, error)
	// retrieve a lineitem
	LoadItem(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*LineItem, error)
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error)
}

type shopClient struct {
	cc *grpc.ClientConn
}

func NewShopClient(cc *grpc.ClientConn) ShopClient {
	return &shopClient{cc}
}

func (c *shopClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/shop.Shop/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) AddItemToBasket(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*ShoppingBasket, error) {
	out := new(ShoppingBasket)
	err := grpc.Invoke(ctx, "/shop.Shop/AddItemToBasket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) LoadItem(ctx context.Context, in *LineItemID, opts ...grpc.CallOption) (*LineItem, error) {
	out := new(LineItem)
	err := grpc.Invoke(ctx, "/shop.Shop/LoadItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) HandleHTTPRequest(ctx context.Context, in *HTTPPageRequest, opts ...grpc.CallOption) (*HTMLPage, error) {
	out := new(HTMLPage)
	err := grpc.Invoke(ctx, "/shop.Shop/HandleHTTPRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Shop service

type ShopServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// add an item to the basket
	AddItemToBasket(context.Context, *LineItemID) (*ShoppingBasket, error)
	// retrieve a lineitem
	LoadItem(context.Context, *LineItemID) (*LineItem, error)
	// handle all http requests nicely (edit, save,rename, foo...)
	HandleHTTPRequest(context.Context, *HTTPPageRequest) (*HTMLPage, error)
}

func RegisterShopServer(s *grpc.Server, srv ShopServer) {
	s.RegisterService(&_Shop_serviceDesc, srv)
}

func _Shop_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_AddItemToBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).AddItemToBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/AddItemToBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).AddItemToBasket(ctx, req.(*LineItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_LoadItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).LoadItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/LoadItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).LoadItem(ctx, req.(*LineItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_HandleHTTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).HandleHTTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/HandleHTTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).HandleHTTPRequest(ctx, req.(*HTTPPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shop.Shop",
	HandlerType: (*ShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Shop_Ping_Handler,
		},
		{
			MethodName: "AddItemToBasket",
			Handler:    _Shop_AddItemToBasket_Handler,
		},
		{
			MethodName: "LoadItem",
			Handler:    _Shop_LoadItem_Handler,
		},
		{
			MethodName: "HandleHTTPRequest",
			Handler:    _Shop_HandleHTTPRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.yacloud.eu/apis/shop/shop.proto",
}

func init() { proto.RegisterFile("golang.yacloud.eu/apis/shop/shop.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x55, 0x5f, 0x8f, 0xda, 0x46,
	0x10, 0x97, 0x39, 0x1f, 0x67, 0x06, 0xc2, 0x71, 0xab, 0x34, 0x72, 0x50, 0xd4, 0x22, 0xab, 0x3a,
	0xa1, 0xa8, 0x72, 0x24, 0x52, 0x55, 0x6a, 0xde, 0x42, 0xa9, 0x7a, 0x48, 0x80, 0xe8, 0x62, 0x5d,
	0x9f, 0x37, 0xf6, 0x9e, 0x59, 0x01, 0xbb, 0xae, 0xbd, 0x4e, 0x8f, 0xd7, 0x7b, 0xcc, 0x47, 0x68,
	0xdf, 0xfa, 0x9d, 0xfa, 0x35, 0xfa, 0x19, 0xaa, 0xdd, 0xb5, 0x8d, 0x4d, 0xa2, 0xbe, 0xe0, 0x99,
	0xdf, 0xfc, 0x7e, 0xfb, 0x67, 0x66, 0x76, 0x80, 0xdb, 0x58, 0xec, 0x09, 0x8f, 0xfd, 0x23, 0x09,
	0xf7, 0x22, 0x8f, 0x7c, 0x9a, 0xbf, 0x21, 0x09, 0xcb, 0xde, 0x64, 0x5b, 0x91, 0xe8, 0x1f, 0x3f,
	0x49, 0x85, 0x14, 0xc8, 0x56, 0xf6, 0xd0, 0x2f, 0xd8, 0xa1, 0xe0, 0x29, 0x89, 0xfe, 0x10, 0x22,
	0xf2, 0x39, 0x95, 0x46, 0x11, 0x8a, 0xc3, 0x41, 0xf0, 0xe2, 0x63, 0x54, 0xc3, 0xc9, 0xff, 0xf0,
	0xb7, 0x93, 0x38, 0x49, 0xc5, 0xe3, 0xb1, 0x32, 0x8c, 0xc6, 0x7b, 0x0d, 0xbd, 0x35, 0xe3, 0x31,
	0xa6, 0x59, 0x22, 0x78, 0x46, 0xd1, 0x10, 0x9c, 0xd2, 0x76, 0xad, 0x91, 0x35, 0xee, 0xe0, 0xca,
	0xf7, 0x3e, 0xb5, 0xa0, 0xbf, 0xd9, 0x8a, 0x24, 0x61, 0x3c, 0x9e, 0x92, 0x6c, 0x47, 0x25, 0xea,
	0x43, 0x6b, 0x3e, 0xd3, 0x44, 0x1b, 0xb7, 0xe6, 0x33, 0x74, 0x0b, 0x97, 0x73, 0x49, 0x0f, 0x99,
	0xdb, 0x1a, 0x5d, 0x8c, 0xbb, 0x93, 0x81, 0xaf, 0x2f, 0x65, 0xc8, 0x2a, 0x80, 0x4d, 0x58, 0x6d,
	0xb3, 0xa2, 0x32, 0x10, 0x92, 0xec, 0xdd, 0x0b, 0xad, 0xae, 0x7c, 0x15, 0xd3, 0xc6, 0x3d, 0x91,
	0xae, 0x6d, 0x62, 0xa5, 0x8f, 0x5e, 0x41, 0xe7, 0x97, 0x54, 0x64, 0x46, 0x78, 0xa9, 0x83, 0x27,
	0x40, 0x29, 0x7f, 0xca, 0xd3, 0x94, 0xf2, 0xf0, 0xe8, 0xb6, 0xcd, 0xe1, 0x4b, 0x1f, 0xdd, 0x42,
	0xbf, 0xb4, 0xd7, 0x29, 0x7d, 0x60, 0x8f, 0xee, 0x95, 0x66, 0x9c, 0xa1, 0x75, 0xde, 0x26, 0x7f,
	0x50, 0x3c, 0xa7, 0xc9, 0x33, 0xa8, 0xf7, 0x97, 0x05, 0x70, 0xba, 0x17, 0xf2, 0xc0, 0x56, 0x5f,
	0x9d, 0x8a, 0xee, 0xa4, 0x6f, 0xee, 0xbd, 0x60, 0x9c, 0xea, 0x5b, 0xeb, 0x98, 0x3a, 0xde, 0xaf,
	0x39, 0xe1, 0x92, 0xc9, 0xa3, 0xdb, 0x1a, 0x59, 0xe3, 0x67, 0xb8, 0xf2, 0xd1, 0x12, 0xda, 0x66,
	0x35, 0x9d, 0x8e, 0xee, 0xe4, 0xb9, 0x59, 0xa1, 0x99, 0xee, 0xe9, 0x37, 0x7f, 0x3e, 0xbd, 0x6c,
	0xe7, 0x8c, 0xcb, 0x1f, 0xbe, 0xff, 0xfb, 0xe9, 0xe5, 0x4d, 0x56, 0x44, 0x3f, 0xe8, 0xa8, 0xcf,
	0x22, 0x5c, 0x2c, 0xe2, 0xfd, 0xdb, 0x02, 0xa7, 0xdc, 0xfd, 0xb3, 0x22, 0x7d, 0x0b, 0xcf, 0x02,
	0x1a, 0x6e, 0x39, 0x0b, 0xc9, 0x7e, 0x45, 0x0e, 0x54, 0x1f, 0xa6, 0x83, 0x9b, 0xa0, 0x62, 0x2d,
	0x49, 0xba, 0xa3, 0x92, 0xf1, 0x58, 0xb3, 0x2e, 0x0c, 0xab, 0x01, 0xa2, 0xd7, 0x30, 0xd8, 0x6c,
	0x45, 0x2a, 0x67, 0x34, 0x0b, 0x53, 0x96, 0x48, 0x26, 0xb8, 0x2e, 0x5a, 0x07, 0x7f, 0x86, 0xa3,
	0x31, 0x5c, 0x2f, 0x04, 0x8f, 0xeb, 0xd4, 0x4b, 0x4d, 0x3d, 0x87, 0x55, 0x99, 0x57, 0x54, 0xbe,
	0x3f, 0x88, 0x9c, 0x4b, 0x5d, 0x49, 0x1b, 0x9f, 0x00, 0x34, 0x80, 0x0b, 0xd5, 0x1b, 0x57, 0x1a,
	0x57, 0x26, 0xfa, 0x1a, 0x40, 0x75, 0x41, 0x21, 0x70, 0x74, 0xa0, 0x86, 0xa8, 0xa2, 0x9e, 0xbc,
	0x80, 0x3e, 0x4a, 0xb7, 0x63, 0x8a, 0xda, 0x44, 0x91, 0x0b, 0x57, 0xf7, 0x44, 0x62, 0x22, 0xa9,
	0x0b, 0x23, 0x6b, 0x6c, 0xe1, 0xd2, 0x55, 0x3b, 0x6c, 0xa4, 0x08, 0x77, 0x0b, 0xfa, 0x91, 0xee,
	0xdd, 0xae, 0xd9, 0xe1, 0x84, 0x78, 0xaf, 0x00, 0xca, 0x7c, 0xcf, 0x67, 0xe7, 0x19, 0xf7, 0x3e,
	0x59, 0xe0, 0xdc, 0x05, 0xcb, 0xc5, 0x9a, 0xc4, 0x14, 0x21, 0xb0, 0xd7, 0x44, 0x6e, 0x8b, 0xe7,
	0xa5, 0x6d, 0x85, 0x4d, 0x45, 0x64, 0xda, 0xa2, 0x87, 0xb5, 0xad, 0x0e, 0x33, 0xcf, 0x7e, 0x3e,
	0x24, 0xf2, 0xa8, 0x53, 0xef, 0xe0, 0xd2, 0x45, 0x23, 0xe8, 0xce, 0xc4, 0x4a, 0xc8, 0xa5, 0x88,
	0xd8, 0xc3, 0x51, 0xe7, 0xdb, 0xc1, 0x75, 0x48, 0xb5, 0xda, 0x92, 0x1d, 0x68, 0x70, 0x4c, 0x68,
	0x91, 0xe3, 0xca, 0xf7, 0x9e, 0x2c, 0xb8, 0xbe, 0x0b, 0x82, 0xb5, 0x3a, 0x0c, 0xa6, 0xbf, 0xe7,
	0x34, 0x93, 0xe8, 0x2d, 0x74, 0x6b, 0x6e, 0xd1, 0xc5, 0x37, 0xa6, 0x07, 0x6b, 0x01, 0x5c, 0x67,
	0xa1, 0x77, 0xd0, 0xdb, 0xd0, 0xf4, 0x63, 0xa5, 0x6a, 0x69, 0xd5, 0x0b, 0xbf, 0x1a, 0x31, 0xf5,
	0x28, 0x6e, 0x70, 0xbd, 0xb8, 0xb1, 0xa1, 0x3a, 0xef, 0x6f, 0x6c, 0xc7, 0x6a, 0x79, 0xa9, 0x7c,
	0xd5, 0x0c, 0x6b, 0x92, 0x4a, 0xa6, 0x1b, 0xc6, 0xb4, 0xea, 0x09, 0x50, 0x85, 0x59, 0x30, 0xbe,
	0x2b, 0xde, 0xb4, 0xe9, 0xd1, 0x1a, 0x32, 0xf9, 0xc7, 0x02, 0x5b, 0xbd, 0x22, 0x34, 0x06, 0x5b,
	0x4d, 0x3a, 0xd4, 0xf3, 0x8b, 0xa1, 0x79, 0x2f, 0x58, 0x34, 0x44, 0xc5, 0x1d, 0xeb, 0x33, 0xf0,
	0x47, 0xb8, 0x7e, 0x1f, 0x45, 0xaa, 0x94, 0x81, 0x28, 0xe6, 0xdc, 0xa0, 0xf9, 0xa0, 0xe7, 0xb3,
	0xe1, 0x17, 0x1f, 0x28, 0xfa, 0x0e, 0x9c, 0x85, 0x20, 0x5a, 0xfb, 0x05, 0xcd, 0xd9, 0x58, 0x40,
	0xef, 0xe0, 0xe6, 0x8e, 0xf0, 0x68, 0x4f, 0x55, 0x39, 0xca, 0x54, 0x7c, 0x65, 0x48, 0x67, 0x15,
	0x2a, 0xb5, 0x65, 0x17, 0x4d, 0x5f, 0xc0, 0x73, 0x9a, 0x57, 0x7f, 0x24, 0x6a, 0xc6, 0x6b, 0xc2,
	0x87, 0xb6, 0x9e, 0xeb, 0x6f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x10, 0x53, 0x92, 0xa8, 0x6b,
	0x06, 0x00, 0x00,
}
