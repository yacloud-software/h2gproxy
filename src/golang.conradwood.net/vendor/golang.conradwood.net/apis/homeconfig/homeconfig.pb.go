// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/homeconfig/homeconfig.proto
// DO NOT EDIT!

/*
Package homeconfig is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/homeconfig/homeconfig.proto

It has these top-level messages:
	ColourSetting
	DayTimeResponse
	SetOnOffRequest
	ProcessResult
	NewTempRequest
	WindowRequest
	ButtonRequest
	Target
	Targets
	ByNameOnOffRequest
	ColourRequest
	ByNameColourRequest
	ByNameRequest
	AlertingRequest
	LivingRoomSetting
	Modules
*/
package homeconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import singingcat "golang.singingcat.net/apis/singingcat"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ColourSetting struct {
	RGB        uint64 `protobuf:"varint,1,opt,name=RGB" json:"RGB,omitempty"`
	Brightness uint32 `protobuf:"varint,2,opt,name=Brightness" json:"Brightness,omitempty"`
}

func (m *ColourSetting) Reset()                    { *m = ColourSetting{} }
func (m *ColourSetting) String() string            { return proto.CompactTextString(m) }
func (*ColourSetting) ProtoMessage()               {}
func (*ColourSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ColourSetting) GetRGB() uint64 {
	if m != nil {
		return m.RGB
	}
	return 0
}

func (m *ColourSetting) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type DayTimeResponse struct {
	DayTime           bool   `protobuf:"varint,1,opt,name=DayTime" json:"DayTime,omitempty"`
	SunlightIntensity uint32 `protobuf:"varint,2,opt,name=SunlightIntensity" json:"SunlightIntensity,omitempty"`
}

func (m *DayTimeResponse) Reset()                    { *m = DayTimeResponse{} }
func (m *DayTimeResponse) String() string            { return proto.CompactTextString(m) }
func (*DayTimeResponse) ProtoMessage()               {}
func (*DayTimeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DayTimeResponse) GetDayTime() bool {
	if m != nil {
		return m.DayTime
	}
	return false
}

func (m *DayTimeResponse) GetSunlightIntensity() uint32 {
	if m != nil {
		return m.SunlightIntensity
	}
	return 0
}

type SetOnOffRequest struct {
	Source string `protobuf:"bytes,1,opt,name=Source" json:"Source,omitempty"`
	On     bool   `protobuf:"varint,2,opt,name=On" json:"On,omitempty"`
}

func (m *SetOnOffRequest) Reset()                    { *m = SetOnOffRequest{} }
func (m *SetOnOffRequest) String() string            { return proto.CompactTextString(m) }
func (*SetOnOffRequest) ProtoMessage()               {}
func (*SetOnOffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetOnOffRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SetOnOffRequest) GetOn() bool {
	if m != nil {
		return m.On
	}
	return false
}

type ProcessResult struct {
	Processed bool `protobuf:"varint,1,opt,name=Processed" json:"Processed,omitempty"`
}

func (m *ProcessResult) Reset()                    { *m = ProcessResult{} }
func (m *ProcessResult) String() string            { return proto.CompactTextString(m) }
func (*ProcessResult) ProtoMessage()               {}
func (*ProcessResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProcessResult) GetProcessed() bool {
	if m != nil {
		return m.Processed
	}
	return false
}

type NewTempRequest struct {
	ModuleRef      *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=ModuleRef" json:"ModuleRef,omitempty"`
	NewTemperature float32               `protobuf:"fixed32,2,opt,name=NewTemperature" json:"NewTemperature,omitempty"`
}

func (m *NewTempRequest) Reset()                    { *m = NewTempRequest{} }
func (m *NewTempRequest) String() string            { return proto.CompactTextString(m) }
func (*NewTempRequest) ProtoMessage()               {}
func (*NewTempRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewTempRequest) GetModuleRef() *singingcat.ModuleRef {
	if m != nil {
		return m.ModuleRef
	}
	return nil
}

func (m *NewTempRequest) GetNewTemperature() float32 {
	if m != nil {
		return m.NewTemperature
	}
	return 0
}

type WindowRequest struct {
	ModuleRef *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=ModuleRef" json:"ModuleRef,omitempty"`
	Since     uint32                `protobuf:"varint,2,opt,name=Since" json:"Since,omitempty"`
}

func (m *WindowRequest) Reset()                    { *m = WindowRequest{} }
func (m *WindowRequest) String() string            { return proto.CompactTextString(m) }
func (*WindowRequest) ProtoMessage()               {}
func (*WindowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WindowRequest) GetModuleRef() *singingcat.ModuleRef {
	if m != nil {
		return m.ModuleRef
	}
	return nil
}

func (m *WindowRequest) GetSince() uint32 {
	if m != nil {
		return m.Since
	}
	return 0
}

type ButtonRequest struct {
	ModuleRef *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=ModuleRef" json:"ModuleRef,omitempty"`
	Pin       uint32                `protobuf:"varint,2,opt,name=Pin" json:"Pin,omitempty"`
	State     uint32                `protobuf:"varint,3,opt,name=State" json:"State,omitempty"`
	Since     uint32                `protobuf:"varint,4,opt,name=Since" json:"Since,omitempty"`
}

func (m *ButtonRequest) Reset()                    { *m = ButtonRequest{} }
func (m *ButtonRequest) String() string            { return proto.CompactTextString(m) }
func (*ButtonRequest) ProtoMessage()               {}
func (*ButtonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ButtonRequest) GetModuleRef() *singingcat.ModuleRef {
	if m != nil {
		return m.ModuleRef
	}
	return nil
}

func (m *ButtonRequest) GetPin() uint32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func (m *ButtonRequest) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ButtonRequest) GetSince() uint32 {
	if m != nil {
		return m.Since
	}
	return 0
}

type Target struct {
	Names []string `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Target) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Targets struct {
	Targets []*Target `protobuf:"bytes,1,rep,name=Targets" json:"Targets,omitempty"`
}

func (m *Targets) Reset()                    { *m = Targets{} }
func (m *Targets) String() string            { return proto.CompactTextString(m) }
func (*Targets) ProtoMessage()               {}
func (*Targets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Targets) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

type ByNameOnOffRequest struct {
	TargetName      string           `protobuf:"bytes,1,opt,name=TargetName" json:"TargetName,omitempty"`
	SetOnOffRequest *SetOnOffRequest `protobuf:"bytes,2,opt,name=SetOnOffRequest" json:"SetOnOffRequest,omitempty"`
}

func (m *ByNameOnOffRequest) Reset()                    { *m = ByNameOnOffRequest{} }
func (m *ByNameOnOffRequest) String() string            { return proto.CompactTextString(m) }
func (*ByNameOnOffRequest) ProtoMessage()               {}
func (*ByNameOnOffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ByNameOnOffRequest) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *ByNameOnOffRequest) GetSetOnOffRequest() *SetOnOffRequest {
	if m != nil {
		return m.SetOnOffRequest
	}
	return nil
}

type ColourRequest struct {
	Colour     string `protobuf:"bytes,1,opt,name=Colour" json:"Colour,omitempty"`
	Brightness uint32 `protobuf:"varint,2,opt,name=Brightness" json:"Brightness,omitempty"`
	Source     string `protobuf:"bytes,3,opt,name=Source" json:"Source,omitempty"`
}

func (m *ColourRequest) Reset()                    { *m = ColourRequest{} }
func (m *ColourRequest) String() string            { return proto.CompactTextString(m) }
func (*ColourRequest) ProtoMessage()               {}
func (*ColourRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ColourRequest) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

func (m *ColourRequest) GetBrightness() uint32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

func (m *ColourRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type ByNameColourRequest struct {
	TargetName    string         `protobuf:"bytes,1,opt,name=TargetName" json:"TargetName,omitempty"`
	ColourRequest *ColourRequest `protobuf:"bytes,2,opt,name=ColourRequest" json:"ColourRequest,omitempty"`
}

func (m *ByNameColourRequest) Reset()                    { *m = ByNameColourRequest{} }
func (m *ByNameColourRequest) String() string            { return proto.CompactTextString(m) }
func (*ByNameColourRequest) ProtoMessage()               {}
func (*ByNameColourRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ByNameColourRequest) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *ByNameColourRequest) GetColourRequest() *ColourRequest {
	if m != nil {
		return m.ColourRequest
	}
	return nil
}

type ByNameRequest struct {
	TargetName string `protobuf:"bytes,1,opt,name=TargetName" json:"TargetName,omitempty"`
}

func (m *ByNameRequest) Reset()                    { *m = ByNameRequest{} }
func (m *ByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ByNameRequest) ProtoMessage()               {}
func (*ByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ByNameRequest) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

type AlertingRequest struct {
	Cluster     string `protobuf:"bytes,1,opt,name=Cluster" json:"Cluster,omitempty"`
	Warnings    uint32 `protobuf:"varint,2,opt,name=Warnings" json:"Warnings,omitempty"`
	Alerts      uint32 `protobuf:"varint,3,opt,name=Alerts" json:"Alerts,omitempty"`
	Emergencies uint32 `protobuf:"varint,4,opt,name=Emergencies" json:"Emergencies,omitempty"`
}

func (m *AlertingRequest) Reset()                    { *m = AlertingRequest{} }
func (m *AlertingRequest) String() string            { return proto.CompactTextString(m) }
func (*AlertingRequest) ProtoMessage()               {}
func (*AlertingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AlertingRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *AlertingRequest) GetWarnings() uint32 {
	if m != nil {
		return m.Warnings
	}
	return 0
}

func (m *AlertingRequest) GetAlerts() uint32 {
	if m != nil {
		return m.Alerts
	}
	return 0
}

func (m *AlertingRequest) GetEmergencies() uint32 {
	if m != nil {
		return m.Emergencies
	}
	return 0
}

type LivingRoomSetting struct {
	SceneName string `protobuf:"bytes,1,opt,name=SceneName" json:"SceneName,omitempty"`
}

func (m *LivingRoomSetting) Reset()                    { *m = LivingRoomSetting{} }
func (m *LivingRoomSetting) String() string            { return proto.CompactTextString(m) }
func (*LivingRoomSetting) ProtoMessage()               {}
func (*LivingRoomSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LivingRoomSetting) GetSceneName() string {
	if m != nil {
		return m.SceneName
	}
	return ""
}

type Modules struct {
	Modules []uint64 `protobuf:"varint,1,rep,packed,name=Modules" json:"Modules,omitempty"`
}

func (m *Modules) Reset()                    { *m = Modules{} }
func (m *Modules) String() string            { return proto.CompactTextString(m) }
func (*Modules) ProtoMessage()               {}
func (*Modules) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Modules) GetModules() []uint64 {
	if m != nil {
		return m.Modules
	}
	return nil
}

func init() {
	proto.RegisterType((*ColourSetting)(nil), "homeconfig.ColourSetting")
	proto.RegisterType((*DayTimeResponse)(nil), "homeconfig.DayTimeResponse")
	proto.RegisterType((*SetOnOffRequest)(nil), "homeconfig.SetOnOffRequest")
	proto.RegisterType((*ProcessResult)(nil), "homeconfig.ProcessResult")
	proto.RegisterType((*NewTempRequest)(nil), "homeconfig.NewTempRequest")
	proto.RegisterType((*WindowRequest)(nil), "homeconfig.WindowRequest")
	proto.RegisterType((*ButtonRequest)(nil), "homeconfig.ButtonRequest")
	proto.RegisterType((*Target)(nil), "homeconfig.Target")
	proto.RegisterType((*Targets)(nil), "homeconfig.Targets")
	proto.RegisterType((*ByNameOnOffRequest)(nil), "homeconfig.ByNameOnOffRequest")
	proto.RegisterType((*ColourRequest)(nil), "homeconfig.ColourRequest")
	proto.RegisterType((*ByNameColourRequest)(nil), "homeconfig.ByNameColourRequest")
	proto.RegisterType((*ByNameRequest)(nil), "homeconfig.ByNameRequest")
	proto.RegisterType((*AlertingRequest)(nil), "homeconfig.AlertingRequest")
	proto.RegisterType((*LivingRoomSetting)(nil), "homeconfig.LivingRoomSetting")
	proto.RegisterType((*Modules)(nil), "homeconfig.Modules")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HomeConfig service

type HomeConfigClient interface {
	// get names of targets we know
	GetTargets(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Targets, error)
	// set a target by name
	SetColourByName(ctx context.Context, in *ByNameColourRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set a target by name to automatic mode
	SetByNameToAutomatic(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set a target by name to user mode
	SetByNameToUser(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set a target by name
	SetOnOffByName(ctx context.Context, in *ByNameOnOffRequest, opts ...grpc.CallOption) (*common.Void, error)
	SetStar(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error)
	SetHeart(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error)
	SetCircle(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set fairy lights to automatic mod
	SetFairyLightsToAutomatic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// fairylights on/off (by user)
	SetFairyLights(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkFairyLights(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// doorbell pressed
	DoorBell(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error)
	// window or door opened
	Opened(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*common.Void, error)
	// window or door closed
	Closed(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*common.Void, error)
	// new temperature submitted by user heating controller
	NewTemp(ctx context.Context, in *NewTempRequest, opts ...grpc.CallOption) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkPemaLight(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkStar(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkCircle(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkCNWLedsWhite(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// set cnw lights to "automatic"
	SetCNWLightsToAutomatic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// cnw on/off (by user)
	SetCNWLights(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error)
	//
	IsDayTime(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DayTimeResponse, error)
	// someone turned on good night mode
	GoodNight(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// someone turned on sleep mode
	Sleep(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// some alerting from somewhere is being reported here
	SetAlerting(ctx context.Context, in *AlertingRequest, opts ...grpc.CallOption) (*common.Void, error)
	// user sets "livingroom" - a composite "target" so to speak
	SetLivingRoom(ctx context.Context, in *LivingRoomSetting, opts ...grpc.CallOption) (*common.Void, error)
	// get all modules we're using
	GetModules(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Modules, error)
	// a button was pressed
	ButtonPressed(ctx context.Context, in *ButtonRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type homeConfigClient struct {
	cc *grpc.ClientConn
}

func NewHomeConfigClient(cc *grpc.ClientConn) HomeConfigClient {
	return &homeConfigClient{cc}
}

func (c *homeConfigClient) GetTargets(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Targets, error) {
	out := new(Targets)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/GetTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetColourByName(ctx context.Context, in *ByNameColourRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetColourByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetByNameToAutomatic(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetByNameToAutomatic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetByNameToUser(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetByNameToUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetOnOffByName(ctx context.Context, in *ByNameOnOffRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetOnOffByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetStar(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetStar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetHeart(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetHeart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetCircle(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetCircle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetFairyLightsToAutomatic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetFairyLightsToAutomatic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetFairyLights(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetFairyLights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) BlinkFairyLights(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/BlinkFairyLights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) DoorBell(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/DoorBell", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) Opened(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/Opened", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) Closed(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/Closed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) NewTemp(ctx context.Context, in *NewTempRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/NewTemp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) BlinkPemaLight(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/BlinkPemaLight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) BlinkStar(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/BlinkStar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) BlinkCircle(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/BlinkCircle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) BlinkCNWLedsWhite(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/BlinkCNWLedsWhite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetCNWLightsToAutomatic(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetCNWLightsToAutomatic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetCNWLights(ctx context.Context, in *SetOnOffRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetCNWLights", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) IsDayTime(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DayTimeResponse, error) {
	out := new(DayTimeResponse)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/IsDayTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) GoodNight(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/GoodNight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) Sleep(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/Sleep", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetAlerting(ctx context.Context, in *AlertingRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetAlerting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) SetLivingRoom(ctx context.Context, in *LivingRoomSetting, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/SetLivingRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) GetModules(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Modules, error) {
	out := new(Modules)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/GetModules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeConfigClient) ButtonPressed(ctx context.Context, in *ButtonRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/homeconfig.HomeConfig/ButtonPressed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HomeConfig service

type HomeConfigServer interface {
	// get names of targets we know
	GetTargets(context.Context, *common.Void) (*Targets, error)
	// set a target by name
	SetColourByName(context.Context, *ByNameColourRequest) (*common.Void, error)
	// set a target by name to automatic mode
	SetByNameToAutomatic(context.Context, *ByNameRequest) (*common.Void, error)
	// set a target by name to user mode
	SetByNameToUser(context.Context, *ByNameRequest) (*common.Void, error)
	// set a target by name
	SetOnOffByName(context.Context, *ByNameOnOffRequest) (*common.Void, error)
	SetStar(context.Context, *SetOnOffRequest) (*common.Void, error)
	SetHeart(context.Context, *SetOnOffRequest) (*common.Void, error)
	SetCircle(context.Context, *SetOnOffRequest) (*common.Void, error)
	// set fairy lights to automatic mod
	SetFairyLightsToAutomatic(context.Context, *common.Void) (*common.Void, error)
	// fairylights on/off (by user)
	SetFairyLights(context.Context, *SetOnOffRequest) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkFairyLights(context.Context, *common.Void) (*common.Void, error)
	// doorbell pressed
	DoorBell(context.Context, *singingcat.ModuleRef) (*common.Void, error)
	// window or door opened
	Opened(context.Context, *WindowRequest) (*common.Void, error)
	// window or door closed
	Closed(context.Context, *WindowRequest) (*common.Void, error)
	// new temperature submitted by user heating controller
	NewTemp(context.Context, *NewTempRequest) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkPemaLight(context.Context, *common.Void) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkStar(context.Context, *common.Void) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkCircle(context.Context, *common.Void) (*common.Void, error)
	// blink and return to previous state before blinking when blinking is done
	BlinkCNWLedsWhite(context.Context, *common.Void) (*common.Void, error)
	// set cnw lights to "automatic"
	SetCNWLightsToAutomatic(context.Context, *common.Void) (*common.Void, error)
	// cnw on/off (by user)
	SetCNWLights(context.Context, *SetOnOffRequest) (*common.Void, error)
	//
	IsDayTime(context.Context, *common.Void) (*DayTimeResponse, error)
	// someone turned on good night mode
	GoodNight(context.Context, *common.Void) (*common.Void, error)
	// someone turned on sleep mode
	Sleep(context.Context, *common.Void) (*common.Void, error)
	// some alerting from somewhere is being reported here
	SetAlerting(context.Context, *AlertingRequest) (*common.Void, error)
	// user sets "livingroom" - a composite "target" so to speak
	SetLivingRoom(context.Context, *LivingRoomSetting) (*common.Void, error)
	// get all modules we're using
	GetModules(context.Context, *common.Void) (*Modules, error)
	// a button was pressed
	ButtonPressed(context.Context, *ButtonRequest) (*common.Void, error)
}

func RegisterHomeConfigServer(s *grpc.Server, srv HomeConfigServer) {
	s.RegisterService(&_HomeConfig_serviceDesc, srv)
}

func _HomeConfig_GetTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).GetTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/GetTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).GetTargets(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetColourByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameColourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetColourByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetColourByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetColourByName(ctx, req.(*ByNameColourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetByNameToAutomatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetByNameToAutomatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetByNameToAutomatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetByNameToAutomatic(ctx, req.(*ByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetByNameToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetByNameToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetByNameToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetByNameToUser(ctx, req.(*ByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetOnOffByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameOnOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetOnOffByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetOnOffByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetOnOffByName(ctx, req.(*ByNameOnOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOnOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetStar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetStar(ctx, req.(*SetOnOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetHeart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOnOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetHeart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetHeart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetHeart(ctx, req.(*SetOnOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOnOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetCircle(ctx, req.(*SetOnOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetFairyLightsToAutomatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetFairyLightsToAutomatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetFairyLightsToAutomatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetFairyLightsToAutomatic(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetFairyLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOnOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetFairyLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetFairyLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetFairyLights(ctx, req.(*SetOnOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_BlinkFairyLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).BlinkFairyLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/BlinkFairyLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).BlinkFairyLights(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_DoorBell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).DoorBell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/DoorBell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).DoorBell(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_Opened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).Opened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/Opened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).Opened(ctx, req.(*WindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_Closed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).Closed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/Closed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).Closed(ctx, req.(*WindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_NewTemp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTempRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).NewTemp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/NewTemp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).NewTemp(ctx, req.(*NewTempRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_BlinkPemaLight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).BlinkPemaLight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/BlinkPemaLight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).BlinkPemaLight(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_BlinkStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).BlinkStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/BlinkStar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).BlinkStar(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_BlinkCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).BlinkCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/BlinkCircle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).BlinkCircle(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_BlinkCNWLedsWhite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).BlinkCNWLedsWhite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/BlinkCNWLedsWhite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).BlinkCNWLedsWhite(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetCNWLightsToAutomatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetCNWLightsToAutomatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetCNWLightsToAutomatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetCNWLightsToAutomatic(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetCNWLights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOnOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetCNWLights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetCNWLights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetCNWLights(ctx, req.(*SetOnOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_IsDayTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).IsDayTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/IsDayTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).IsDayTime(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_GoodNight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).GoodNight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/GoodNight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).GoodNight(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).Sleep(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetAlerting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetAlerting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetAlerting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetAlerting(ctx, req.(*AlertingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_SetLivingRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivingRoomSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).SetLivingRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/SetLivingRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).SetLivingRoom(ctx, req.(*LivingRoomSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_GetModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).GetModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/GetModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).GetModules(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeConfig_ButtonPressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeConfigServer).ButtonPressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeconfig.HomeConfig/ButtonPressed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeConfigServer).ButtonPressed(ctx, req.(*ButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HomeConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "homeconfig.HomeConfig",
	HandlerType: (*HomeConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTargets",
			Handler:    _HomeConfig_GetTargets_Handler,
		},
		{
			MethodName: "SetColourByName",
			Handler:    _HomeConfig_SetColourByName_Handler,
		},
		{
			MethodName: "SetByNameToAutomatic",
			Handler:    _HomeConfig_SetByNameToAutomatic_Handler,
		},
		{
			MethodName: "SetByNameToUser",
			Handler:    _HomeConfig_SetByNameToUser_Handler,
		},
		{
			MethodName: "SetOnOffByName",
			Handler:    _HomeConfig_SetOnOffByName_Handler,
		},
		{
			MethodName: "SetStar",
			Handler:    _HomeConfig_SetStar_Handler,
		},
		{
			MethodName: "SetHeart",
			Handler:    _HomeConfig_SetHeart_Handler,
		},
		{
			MethodName: "SetCircle",
			Handler:    _HomeConfig_SetCircle_Handler,
		},
		{
			MethodName: "SetFairyLightsToAutomatic",
			Handler:    _HomeConfig_SetFairyLightsToAutomatic_Handler,
		},
		{
			MethodName: "SetFairyLights",
			Handler:    _HomeConfig_SetFairyLights_Handler,
		},
		{
			MethodName: "BlinkFairyLights",
			Handler:    _HomeConfig_BlinkFairyLights_Handler,
		},
		{
			MethodName: "DoorBell",
			Handler:    _HomeConfig_DoorBell_Handler,
		},
		{
			MethodName: "Opened",
			Handler:    _HomeConfig_Opened_Handler,
		},
		{
			MethodName: "Closed",
			Handler:    _HomeConfig_Closed_Handler,
		},
		{
			MethodName: "NewTemp",
			Handler:    _HomeConfig_NewTemp_Handler,
		},
		{
			MethodName: "BlinkPemaLight",
			Handler:    _HomeConfig_BlinkPemaLight_Handler,
		},
		{
			MethodName: "BlinkStar",
			Handler:    _HomeConfig_BlinkStar_Handler,
		},
		{
			MethodName: "BlinkCircle",
			Handler:    _HomeConfig_BlinkCircle_Handler,
		},
		{
			MethodName: "BlinkCNWLedsWhite",
			Handler:    _HomeConfig_BlinkCNWLedsWhite_Handler,
		},
		{
			MethodName: "SetCNWLightsToAutomatic",
			Handler:    _HomeConfig_SetCNWLightsToAutomatic_Handler,
		},
		{
			MethodName: "SetCNWLights",
			Handler:    _HomeConfig_SetCNWLights_Handler,
		},
		{
			MethodName: "IsDayTime",
			Handler:    _HomeConfig_IsDayTime_Handler,
		},
		{
			MethodName: "GoodNight",
			Handler:    _HomeConfig_GoodNight_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _HomeConfig_Sleep_Handler,
		},
		{
			MethodName: "SetAlerting",
			Handler:    _HomeConfig_SetAlerting_Handler,
		},
		{
			MethodName: "SetLivingRoom",
			Handler:    _HomeConfig_SetLivingRoom_Handler,
		},
		{
			MethodName: "GetModules",
			Handler:    _HomeConfig_GetModules_Handler,
		},
		{
			MethodName: "ButtonPressed",
			Handler:    _HomeConfig_ButtonPressed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/homeconfig/homeconfig.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/homeconfig/homeconfig.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 985 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0x96, 0x93, 0x34, 0xb6, 0xc7, 0x75, 0x5e, 0xb6, 0x05, 0x1c, 0x53, 0x8c, 0x75, 0x95, 0x68,
	0x90, 0x82, 0xad, 0x26, 0xf4, 0x0d, 0x10, 0x25, 0x4e, 0x4b, 0x5a, 0x29, 0xd8, 0xd1, 0x5d, 0xc0,
	0x82, 0x2f, 0xe8, 0x38, 0x4f, 0x2e, 0x2b, 0xee, 0x76, 0xcd, 0xed, 0x5e, 0xa3, 0x88, 0x4f, 0xf0,
	0x4f, 0xf9, 0x27, 0xe8, 0xf6, 0x76, 0xe3, 0xbd, 0x73, 0xe4, 0xd4, 0xea, 0x27, 0xef, 0xcc, 0x3e,
	0xcf, 0xcc, 0xec, 0xdc, 0xb3, 0xe3, 0x85, 0xa7, 0x21, 0x8f, 0x7c, 0x16, 0xf6, 0x02, 0xce, 0x12,
	0x7f, 0x72, 0xc9, 0xf9, 0xa4, 0xc7, 0x50, 0xf6, 0xfd, 0x29, 0x15, 0xfd, 0x0b, 0x1e, 0x63, 0xc0,
	0xd9, 0x39, 0x0d, 0xad, 0x65, 0x6f, 0x9a, 0x70, 0xc9, 0x09, 0xcc, 0x3c, 0xed, 0xde, 0x82, 0x18,
	0x01, 0x8f, 0x63, 0xce, 0xf4, 0x4f, 0xce, 0x6d, 0x9b, 0x9c, 0x82, 0xb2, 0x90, 0xb2, 0x30, 0xf0,
	0xe5, 0x0c, 0x3f, 0xf3, 0x59, 0xcb, 0x9c, 0xe7, 0x1c, 0x42, 0xf3, 0x88, 0x47, 0x3c, 0x4d, 0x3c,
	0x94, 0x92, 0xb2, 0x90, 0x6c, 0xc1, 0xaa, 0x7b, 0x3c, 0x68, 0x55, 0xba, 0x95, 0xdd, 0x35, 0x37,
	0x5b, 0x92, 0x0e, 0xc0, 0x20, 0xa1, 0xe1, 0x85, 0x64, 0x28, 0x44, 0x6b, 0xa5, 0x5b, 0xd9, 0x6d,
	0xba, 0x96, 0xc7, 0xf9, 0x15, 0x36, 0x5f, 0xf9, 0x57, 0x67, 0x34, 0x46, 0x17, 0xc5, 0x94, 0x33,
	0x81, 0xa4, 0x05, 0x55, 0xed, 0x52, 0x81, 0x6a, 0xae, 0x31, 0xc9, 0x1e, 0x6c, 0x7b, 0x29, 0x8b,
	0x32, 0xf2, 0x5b, 0x26, 0x91, 0x09, 0x2a, 0xaf, 0x74, 0xcc, 0xf9, 0x0d, 0xe7, 0x05, 0x6c, 0x7a,
	0x28, 0x47, 0x6c, 0x74, 0x7e, 0xee, 0xe2, 0x5f, 0x29, 0x0a, 0x49, 0x3e, 0x86, 0x75, 0x8f, 0xa7,
	0x49, 0x90, 0x47, 0xae, 0xbb, 0xda, 0x22, 0x1b, 0xb0, 0x32, 0x62, 0x2a, 0x52, 0xcd, 0x5d, 0x19,
	0x31, 0xe7, 0x2b, 0x68, 0x9e, 0x26, 0x3c, 0x40, 0x21, 0x5c, 0x14, 0x69, 0x24, 0xc9, 0x03, 0xa8,
	0x6b, 0x07, 0x4e, 0x74, 0x55, 0x33, 0x87, 0x13, 0xc3, 0xc6, 0x10, 0x2f, 0xcf, 0x30, 0x9e, 0x9a,
	0x44, 0x07, 0x50, 0xff, 0x89, 0x4f, 0xd2, 0x08, 0x5d, 0x3c, 0x57, 0xf8, 0xc6, 0xfe, 0x47, 0x76,
	0x7b, 0xaf, 0x37, 0xdd, 0x19, 0x8e, 0x7c, 0x71, 0x1d, 0x06, 0x13, 0x5f, 0xa6, 0x09, 0xaa, 0x8a,
	0x56, 0xdc, 0x92, 0xd7, 0xf9, 0x0d, 0x9a, 0x63, 0xca, 0x26, 0xfc, 0xf2, 0x83, 0xb2, 0xdd, 0x87,
	0x3b, 0x1e, 0x65, 0x01, 0xea, 0x06, 0xe6, 0x86, 0xf3, 0x6f, 0x05, 0x9a, 0x83, 0x54, 0x4a, 0xce,
	0x3e, 0x28, 0xf8, 0x16, 0xac, 0x9e, 0x52, 0xa6, 0x43, 0x67, 0x4b, 0x95, 0x4e, 0xfa, 0x12, 0x5b,
	0xab, 0x3a, 0x5d, 0x66, 0xcc, 0x8a, 0x58, 0xb3, 0x8b, 0xe8, 0xc0, 0xfa, 0x99, 0x9f, 0x84, 0x28,
	0xb3, 0xfd, 0xa1, 0x1f, 0xa3, 0x68, 0x55, 0xba, 0xab, 0xbb, 0x75, 0x37, 0x37, 0x9c, 0x67, 0x50,
	0xcd, 0xf7, 0x05, 0xd9, 0xbb, 0x5e, 0x2a, 0x48, 0x63, 0x9f, 0xf4, 0xac, 0xab, 0x91, 0x6f, 0xb9,
	0x06, 0xe2, 0xfc, 0x0d, 0x64, 0x70, 0x95, 0xc5, 0x28, 0xa8, 0xa2, 0x03, 0x90, 0x03, 0xb2, 0x1d,
	0xad, 0x0c, 0xcb, 0x43, 0x5e, 0xcf, 0x09, 0x49, 0x1d, 0xac, 0xb1, 0xff, 0xa9, 0x9d, 0xab, 0x04,
	0x71, 0xcb, 0x1c, 0xe7, 0x77, 0x73, 0x5b, 0x2c, 0x35, 0xe6, 0x0e, 0xa3, 0xc6, 0xdc, 0xba, 0xed,
	0xce, 0x58, 0x2a, 0x5e, 0xb5, 0x55, 0xec, 0xbc, 0x83, 0x7b, 0xf9, 0xe9, 0x8a, 0x69, 0x6e, 0x3b,
	0xde, 0xcb, 0x52, 0x5d, 0xfa, 0x70, 0x3b, 0xf6, 0xe1, 0x0a, 0x00, 0xb7, 0x88, 0x77, 0xfa, 0xd0,
	0xcc, 0xf3, 0xbe, 0x67, 0x46, 0xe7, 0x9f, 0x0a, 0x6c, 0x1e, 0x46, 0x98, 0x64, 0x33, 0xc3, 0x70,
	0x5a, 0x50, 0x3d, 0x8a, 0x52, 0x21, 0xd1, 0x74, 0xc3, 0x98, 0xa4, 0x0d, 0xb5, 0xb1, 0x9f, 0x30,
	0xca, 0x42, 0xd3, 0x8c, 0x6b, 0x3b, 0x6b, 0x85, 0x0a, 0x24, 0xb4, 0xac, 0xb4, 0x45, 0xba, 0xd0,
	0x78, 0x1d, 0x63, 0x12, 0x22, 0x0b, 0x28, 0x0a, 0xad, 0x2e, 0xdb, 0xe5, 0x3c, 0x86, 0xed, 0x13,
	0xfa, 0x2e, 0x2b, 0x80, 0xf3, 0xd8, 0xcc, 0xaf, 0x07, 0x50, 0xf7, 0x02, 0x64, 0x68, 0xd5, 0x3d,
	0x73, 0x38, 0x0f, 0xa1, 0x9a, 0x2b, 0x5c, 0x64, 0xd5, 0xea, 0xa5, 0x92, 0xdd, 0x9a, 0x6b, 0xcc,
	0xfd, 0xff, 0x1a, 0x00, 0x6f, 0x78, 0xf6, 0x0d, 0xb2, 0xc6, 0x91, 0x3e, 0xc0, 0x31, 0x4a, 0xa3,
	0xd6, 0xbb, 0x3d, 0x3d, 0x77, 0x7f, 0xe1, 0x74, 0xd2, 0xbe, 0x37, 0x2f, 0x55, 0x41, 0x7e, 0x50,
	0x62, 0xcb, 0x1b, 0x9c, 0x77, 0x95, 0x7c, 0x6e, 0xe3, 0x6e, 0xf8, 0xc2, 0xed, 0x42, 0x58, 0xf2,
	0x12, 0xee, 0x7b, 0x28, 0x73, 0xdc, 0x19, 0x3f, 0x4c, 0x25, 0x8f, 0x7d, 0x49, 0x03, 0xb2, 0x33,
	0x1f, 0xe6, 0xe6, 0x00, 0xdf, 0xa8, 0x12, 0x4c, 0x80, 0x9f, 0x05, 0x26, 0xef, 0xcf, 0xfd, 0x1e,
	0x36, 0x8c, 0xee, 0x75, 0xf5, 0x9d, 0x79, 0xaa, 0x7d, 0x2d, 0x4a, 0xfc, 0xaf, 0xa1, 0xea, 0xa1,
	0xf4, 0xa4, 0x9f, 0x90, 0x45, 0xb7, 0xab, 0xc4, 0x7a, 0x02, 0x35, 0x0f, 0xe5, 0x1b, 0xf4, 0x13,
	0xb9, 0x0c, 0xed, 0x29, 0xd4, 0xb3, 0x5e, 0xd3, 0x24, 0x88, 0x70, 0x19, 0xde, 0x33, 0xd8, 0xf1,
	0x50, 0xfe, 0xe8, 0xd3, 0xe4, 0xea, 0x24, 0xbb, 0x95, 0xc2, 0x6e, 0x73, 0xf1, 0x1b, 0x17, 0x89,
	0xdf, 0xaa, 0xee, 0x58, 0xc4, 0x65, 0xb2, 0xf6, 0x60, 0x6b, 0x10, 0x51, 0xf6, 0xa7, 0x4d, 0x5f,
	0x94, 0xac, 0x0f, 0xb5, 0x57, 0x9c, 0x27, 0x03, 0x8c, 0x22, 0x72, 0xf3, 0xc4, 0x2e, 0x11, 0x1e,
	0xc3, 0xfa, 0x68, 0x8a, 0x0c, 0x27, 0xc5, 0xcf, 0x5d, 0xf8, 0xaf, 0x99, 0xa7, 0x1c, 0x45, 0x5c,
	0x2c, 0x43, 0x39, 0x80, 0xaa, 0xfe, 0x3f, 0x23, 0x6d, 0x9b, 0x53, 0xfc, 0x07, 0x2d, 0x91, 0xf6,
	0x60, 0x43, 0x9d, 0xfd, 0x14, 0x63, 0x5f, 0x1d, 0x7d, 0xe1, 0xc9, 0x1f, 0x41, 0x5d, 0xa1, 0x95,
	0x8c, 0x16, 0x01, 0xbf, 0x84, 0x86, 0x02, 0x6a, 0x09, 0x2c, 0xee, 0xe6, 0x76, 0x0e, 0x1d, 0x8e,
	0x4f, 0x70, 0x22, 0xc6, 0x17, 0x54, 0x2e, 0x26, 0x3c, 0x81, 0x4f, 0x32, 0x71, 0x0d, 0xc7, 0xcb,
	0x49, 0xe4, 0x05, 0xdc, 0xb5, 0x69, 0x4b, 0xca, 0xf9, 0xad, 0x30, 0x6f, 0xa5, 0x62, 0x8e, 0x42,
	0x94, 0xf2, 0x83, 0xeb, 0x11, 0xd4, 0x8f, 0x39, 0x9f, 0x0c, 0x6f, 0xed, 0xeb, 0x43, 0xb8, 0xe3,
	0x45, 0x88, 0xd3, 0x85, 0xa0, 0xe7, 0xd0, 0xf0, 0x50, 0x9a, 0xf1, 0x5e, 0xac, 0xbf, 0x34, 0xf4,
	0x4b, 0xcc, 0xef, 0xa0, 0xe9, 0xa1, 0x9c, 0x4d, 0x65, 0xf2, 0x99, 0xcd, 0x9d, 0x9b, 0xd6, 0x73,
	0x1f, 0x28, 0x9b, 0xb4, 0x66, 0x40, 0x2f, 0x98, 0xb4, 0x06, 0xf2, 0xdc, 0xbc, 0x74, 0x4e, 0x13,
	0xf5, 0x8c, 0x2b, 0x0d, 0x39, 0xfb, 0x11, 0x54, 0x4c, 0x35, 0xe8, 0x42, 0x87, 0xa1, 0xb4, 0x9f,
	0xd7, 0xd9, 0x53, 0xd9, 0x62, 0xff, 0xb1, 0xae, 0x1e, 0xc8, 0x07, 0xff, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x09, 0x38, 0x29, 0x36, 0xce, 0x0b, 0x00, 0x00,
}
